#ifndef	VALUE_H_
#define	VALUE_H_

#include <string>

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	Value
{
public:
	virtual	~Value();

	virtual	void	Set(const std::string& _value) = 0;
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueNumber : public Value
{
public:
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueInt : public ValueNumber
{
public:
	ValueInt& operator=(int _value);
	virtual	void	Set(const std::string& _value);
protected:
	int	value_;
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueBool : public ValueNumber
{
public:
	ValueBool& operator=(bool _value);
	void	Set(const std::string& _value);
protected:
	bool	value_;
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueFloat : public ValueNumber
{
public:
	ValueFloat& operator=(float _value);

	void	Set(const std::string& _value);
protected:
	float	value_;
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueString : public Value
{
public:
	ValueString& operator=(const std::string& _value);

	void	Set(const std::string& _value);
protected:
	std::string	value_;	
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueStringLimit: public ValueString
{
public:
	ValueStringLimit(uint32_t limit);

	ValueStringLimit& operator=(std::string& _value);
	ValueStringLimit& operator=(char *_value);

	void	Set(const std::string& _value);
protected:
	uint32_t	limit_;	
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueID : public ValueStringLimit
{
public:
	ValueID();
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueName : public ValueStringLimit
{
public:
	ValueName();
};

///////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////
class	ValueIP : public ValueString
{
public:
	void	Set(const std::string& _value);
};

#endif
