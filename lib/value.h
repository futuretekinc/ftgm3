#ifndef	VALUE_H_
#define	VALUE_H_

#include <string>

///////////////////////////////////////////////////////////////
// Class Value
///////////////////////////////////////////////////////////////
class	Value
{
public:
	virtual	~Value();

	virtual	void		Set(const std::string& _value) = 0;
	virtual	std::string	ToString();
};

///////////////////////////////////////////////////////////////
// Class ValueNumber
///////////////////////////////////////////////////////////////
class	ValueNumber : public Value
{
public:
protected:
};

///////////////////////////////////////////////////////////////
// Class ValueInt
///////////////////////////////////////////////////////////////
class	ValueInt : public ValueNumber
{
public:
	ValueInt& operator=(int _value);
	virtual	void		Set(const std::string& _value);
	virtual	std::string	ToString();
protected:
	int	value_;
};

///////////////////////////////////////////////////////////////
// Class ValueBool
///////////////////////////////////////////////////////////////
class	ValueBool : public ValueNumber
{
public:
	ValueBool& operator=(bool _value);
			void		Set(const std::string& _value);
	virtual	std::string	ToString();
protected:
	bool	value_;
};

///////////////////////////////////////////////////////////////
// Class ValueFloat
///////////////////////////////////////////////////////////////
class	ValueFloat : public ValueNumber
{
public:
	ValueFloat& operator=(float _value);

			void		Set(const std::string& _value);
	virtual	std::string	ToString();
protected:
	float	value_;
};

///////////////////////////////////////////////////////////////
// Class ValueString
///////////////////////////////////////////////////////////////
class	ValueString : public Value
{
public:
	ValueString();
	ValueString(const std::string& _value);

	ValueString& operator=(const std::string& _value);

			void		Set(const std::string& _value);
	virtual	std::string	ToString();

protected:
	std::string	value_;	
};

///////////////////////////////////////////////////////////////
// Class ValueStringLimit
///////////////////////////////////////////////////////////////
class	ValueStringLimit: public ValueString
{
public:
	ValueStringLimit(uint32_t limit);

	ValueStringLimit& operator=(std::string& _value);
	ValueStringLimit& operator=(char *_value);

	void	Set(const std::string& _value);
protected:
	uint32_t	limit_;	
};

///////////////////////////////////////////////////////////////
// Class ValueID
///////////////////////////////////////////////////////////////
class	ValueID : public ValueStringLimit
{
public:
	ValueID();
	ValueID(const std::string& _value);
};

///////////////////////////////////////////////////////////////
// Class	ValueName
///////////////////////////////////////////////////////////////
class	ValueName : public ValueStringLimit
{
public:
	ValueName();
	ValueName(const std::string& _value);
};

///////////////////////////////////////////////////////////////
// Class ValueIP
///////////////////////////////////////////////////////////////
class	ValueIP : public ValueString
{
public:
	void	Set(const std::string& _value);
};

#endif
